#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */
const onlineUserMap = {}
var server = http.createServer(app.callback());
const io = require('socket.io').listen(server)
io.sockets.on('connection', (socket) => {
  console.log('连接成功', socket.id)
  // onlineUserMap.push(socket.id)
  socket.on('go', name => {
    onlineUserMap[socket.id] = name
    io.emit('receiveMsg', {
      type: 'SYSTEM',
      data:`用户 ${name} 加入聊天室`,
      count: Object.values(onlineUserMap).length
    })
  })
  
  socket.on('sendMessage', data => {
    io.emit('receiveMsg', data)
  })
  socket.on('disconnect', () => { // 关闭链接的时候会执行
      const id = socket.id
      if (!id) return
      io.emit('receiveMsg', {
        type: 'SYSTEM',
        data: `用户 ${onlineUserMap[id]} 退出群聊`,
        count: Object.values(onlineUserMap).length
      })
      delete onlineUserMap[id]
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
